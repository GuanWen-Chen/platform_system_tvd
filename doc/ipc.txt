
# *tvd* IPC protocol

The program *tvd* implements a socket IPC protocol around Android's
TV input HAL API. This document describes the IPC protocol in detail.

Clients (i.e., external software) of tv functionality establish a
connection with *tvd* and send **command messages.** For each command,
*tvd* replies with a **response message.** Examples of commands are
starting or canceling channel scanning process.

In addition to responses, *tvd* also sends **notification messages**
to inform its client about external events. An examples of notifications
are events from TV inputs.


## Connection establishment

Connections are **always** established by *tvd*. Supported sockets are
in the domain AF_UNIX with type SOCK_SEQPACKET. The client shall

  1. create a compatible listen socket,
  2. set an abstract socket name,
  3. start listening on the created socket, and
  4. start *tvd*.

The abstract socket name (excluding the trailing \0) is supplied to *tvd*
via the command-line option '-a'. *Tvd* will establish a connection to
the respective socket. If no socket name is given, the default is *tvd.*


## IPC protocol

The IPC protocol is PDU based. Each PDU contains exactly one message. There
are 3 types of messages:

  * commands,
  * resonses, and
  * notifications.

All PDUs have the same format (sizes in bits):

  +--------+--------+----------------+--- ... ---+
  | Service| Opcode | Payload length |  Payload  |
  +--------+--------+----------------+--- ... ---+
       8        8           16         <variable>

A **service** represents a group of messages, each **opcode** represents a
message of the service. Commands and their responses use the same opcode and
can be distinguished by the message's direction. Commands always flow from
client to daemon, responses always flow from daemon to client.

Notifications also always flow from daemon to client. They are distiguished
from responses by their opcodes, which always have the MSB set to 1 for
notifications.

The format of the IPC protocol is intended to be compatible with the HAL
protocol for BlueZ [1].

### Registry service

The service ID is 0x00.

#### Commands / Responses

  * Opcode 0x00   Error response

      + Command:  - n/a
      + Response: - Error code (1 octet)

  * Opcode 0x01   Register service

      + Command:  - Service id (1 octet)
      + Response: - Protocol version (4 octets)

  * Opcode 0x02   Unregister service

      + Command:  - Service id (1 octet)
      + Response: <none>

## References

[1] [Android HAL protocol for Bluetooth](https://git.kernel.org/cgit/bluetooth/bluez.git/tree/android/hal-ipc-api.txt)
